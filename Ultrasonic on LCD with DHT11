/*
  Ultrasonic Sensor and DHT11 Sensor with LCD Display
  This program reads the distance measured by an Ultrasonic sensor and
  the temperature and humidity measured by a DHT11 sensor, and displays
  the data on a 16x2 LCD. The program uses digital output to control the
  Ultrasonic sensor and digital input to read its readings, and digital
  input to read the button state, and digital output to control the LCD
  display.
  Author: Daniel Bohbot
  Date: May 6, 2023
*/
// DHT Temperature & Humidity Sensor
// Unified Sensor Library Example
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#define DHTPIN 2     // Digital pin connected to the DHT sensor
// Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --
// Pin 15 can work but DHT must be disconnected during program upload.
// Uncomment the type of sensor in use:
//#define DHTTYPE    DHT11     // DHT 11
#define DHTTYPE    DHT11     // DHT 11 (AM2302)
//#define DHTTYPE    DHT21     // DHT 21 (AM2301)
#include <LiquidCrystal.h>
// initialize the LCD library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 6, 5, 4, 3);
// define pins for the button and the ultrasonic sensor
const int buttonPin = 9;
const int trigPin = 13;
const int echoPin = 8;
// create a DHT object
DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;
// Creating custome character for temperature display with degrees
byte customChar [] = {
  B01110,
  B01010,
  B01110,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000
};
void setup() {
  // set up the LCD's number of columns and rows
  lcd.begin(16, 2);
lcd.createChar(0, customChar);
 lcd.home();
  // set up the button and the ultrasonic sensor pins
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
     dht.begin();
  Serial.println(F("DHTxx Unified Sensor Example"));
  // Print temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("째C"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("째C"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("째C"));
  Serial.println(F("------------------------------------"));
  // Print humidity sensor details.
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("%"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("%"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("%"));
  Serial.println(F("------------------------------------"));
  // start the DHT sensor
  // Set delay between sensor readings based on sensor details.
  delayMS = sensor.min_delay / 1000;
}
void loop() {
  // read the button state
  int buttonState = digitalRead(buttonPin);
  if (buttonState == HIGH) {
    // if the button is pressed, read the DHT11 sensor data and display it on the LCD
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println(F("Error reading temperature!"));
    lcd.setCursor(0,0);
    lcd.print("Error reading temperature!");} 
  else {
     lcd.setCursor(0, 0);   // Set the cursor to the first column of the second row
    Serial.print(F("Temperature: "));
    Serial.print(event.temperature);
    Serial.println(F("째C"));
  lcd.print("Temp: ");    // Print the text "Temp: "
  lcd.print(event.temperature);   // Print the temperature
  lcd.print(" C");   // Print the temperature unit
  lcd.write(byte(0));//custom character
  lcd.print ("       ");// removes any visual inconsistancies
  }
  // Get humidity event and print its value.
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    Serial.println(F("Error reading humidity!"));
         lcd.setCursor(0,1);
    lcd.print("Error reading humidity!");
  }
  else {
     lcd.setCursor(0, 1);   // Set the cursor to the first column of the second row
    Serial.print(F("Humidity:"));
    Serial.print(event.relative_humidity);
    Serial.println(F("%"));
   
  lcd.print("Humidity:");    // Print the text "Humidity: "
  lcd.print(event.relative_humidity);   // Print the humidity
  lcd.print("%");   // Print the humidity unit
}
  } else {
    // if the button is not pressed, read the ultrasonic sensor and display the distance on the LCD
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    long duration = pulseIn(echoPin, HIGH);
    float distance = duration / 58.0;
if (distance >= 400 || distance <= 2 ){
  lcd.clear();
  lcd.setCursor(0, 0);// Set the cursor to the first column of the second row
  Serial.println("out of range");
  lcd.print("out of range");
}
else {
  lcd.clear();
  lcd.setCursor(0, 0);// Set the cursor to the first column of the second row
  Serial.print(distance);
Serial.println("cm"); 
  lcd.print("Distance:");
  lcd.print(distance);
  lcd.print("cm");
}
  }
  // wait a short time before checking the button state again
  delay(100);
}
